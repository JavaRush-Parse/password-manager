name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  JAVA_VERSION: '21'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache_key: ${{ steps.generate_key.outputs.cache_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Generate cache key
        id: generate_key
        # use GITHUB_OUTPUT to set a step output named "cache_key"
        run: echo "cache_key=${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}" >> $GITHUB_OUTPUT

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ steps.generate_key.outputs.cache_key }}
          restore-keys: |
            ${{ runner.os }}-maven-

  fmt-check:
    needs: setup
    runs-on: ubuntu-latest
    name: Verify code formatting
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Format check
        run: mvn com.spotify.fmt:fmt-maven-plugin:2.25:check

  test:
    needs: [setup, fmt-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache_key }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        run: mvn --batch-mode --update-snapshots test

      - name: Generate JaCoCo report
        run: mvn jacoco:report

      - name: Publish unit test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: target/surefire-reports/*.xml
          report_individual_runs: true

      - name: JUnit Test Report
        if: always()
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: target/surefire-reports/*.xml
          check_name: JUnit Test Report

  coverage:
    needs: [setup, fmt-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.setup.outputs.cache_key }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests with coverage
        run: mvn clean test jacoco:report

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.2
        with:
          paths: |
            ${{ github.workspace }}/target/site/jacoco/jacoco.xml,
            ${{ github.workspace }}/**/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60
          title: Code Coverage Report
          update-comment: true

      - name: Generate Coverage Badge
        id: coverage-badge
        run: |
          echo "coverage=${{ steps.jacoco.outputs.coverage-overall }}" >> $GITHUB_OUTPUT

      - name: Fail PR if overall coverage is less than 80%
        if: ${{ steps.jacoco.outputs.coverage-overall < 80.0 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Overall coverage is less than 80%! Current coverage: ${{ steps.jacoco.outputs.coverage-overall }}%')

      # Optional: Add coverage comment with details
      - name: Add Coverage PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const coverage = ${{ steps.jacoco.outputs.coverage-overall }};
            const changedFilesCoverage = ${{ steps.jacoco.outputs.coverage-changed-files }};
            const isPassing = coverage >= 80.0;
            const emoji = isPassing ? '✅' : '❌';
            
            const comment = `## ${emoji} Coverage Report
            
            - **Overall Coverage**: ${coverage}% ${isPassing ? '(Passing)' : '(Failing - minimum 80% required)'}
            - **Changed Files Coverage**: ${changedFilesCoverage}% ${changedFilesCoverage >= 60 ? '✓' : '✗ (minimum 60% required)'}
            
            ${!isPassing ? '⚠️ **This PR will be blocked until coverage reaches 80%**' : ''}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

#      - name: Codacy Coverage Reporter
#        uses: codacy/codacy-coverage-reporter-action@v1.3.0
#        with:
#          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
#          coverage-reports: target/site/jacoco/jacoco.xml